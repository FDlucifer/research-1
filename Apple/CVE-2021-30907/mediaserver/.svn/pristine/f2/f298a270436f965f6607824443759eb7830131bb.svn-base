#ifndef _MEDIA_SB_AUDIO_QUEUE_H_
#define _MEDIA_SB_AUDIO_QUEUE_H_

#include <AudioToolbox/AudioToolbox.h>
#include <stdint.h>

#ifndef CONSOLE
int aq_go(void);
#endif /* CONSOLE */

typedef uint64_t (*allocate_buffer_fn_t)(uint64_t, uint64_t, uint32_t, uint64_t, uint32_t, void*, int);
typedef struct aq_context_s aq_context_t;
struct aq_context_s {

    mach_port_t audio_queue_service_port;

    // Addresses for functions and global variables
    /**
     * AllocateBuffer() in AudioToolbox called by AudioQueueAllocateBuffer() API.
     */
    allocate_buffer_fn_t allocate_buffer_fn;

    struct {
        uint64_t remote_start;
        uint64_t local_start;
        uint32_t shared_capacity;
    } current_stat;

    struct {
        uint32_t queue_id;
        mach_port_t shared_mem_entry;
        uint64_t remote_start;
        uint64_t local_start;
    } assist;

#define SPRAY_CONTEXT_QUEUE_COUNT_MAX 0x20
#define SPRAY_CONTEXT_QUEUE_BUFFER_COUNT 0x20
    struct {
        struct {
            uint32_t queue_id;
            uint64_t queue;

            // uint64_t buffer[SPRAY_CONTEXT_QUEUE_BUFFER_COUNT];

            struct {
                uint64_t remote_start;
                uint64_t local_start;
                mach_port_t mem_entry;
            } shared_buffer[SPRAY_CONTEXT_QUEUE_BUFFER_COUNT];

        } queues[SPRAY_CONTEXT_QUEUE_COUNT_MAX];
    } spray_context;

#define HEAP_FENGSHUI_OBJECT_COUNT 0x100
    struct {
        struct {
            uint32_t queue_id;
            uint64_t queue;
        } queues[HEAP_FENGSHUI_OBJECT_COUNT];
    } fengshui_context;
};

#endif /* _MEDIA_SB_AUDIO_QUEUE_H_ */
